name: '3.0$(Rev:.r).0'

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - src
    exclude:
    - '*.md'

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'x64'
  buildConfiguration: 'Release'
  appxPackageDir: '$(build.artifactStagingDirectory)\AppxPackages\\'

steps:

#- powershell: |
#      [xml]$manifest=get-content ".\src\Apps\Windows\AnyStatus.Apps.Windows.Package\Package.appxmanifest"
#      $manifest.Package.Identity.Version=$Env:BUILD_BUILDNUMBER
#      $manifest.save(".\src\Apps\Windows\AnyStatus.Apps.Windows.Package\Package.appxmanifest")

#- powershell: |
#      [xml]$manifest=get-content ".\src\Core\AnyStatus.API\AnyStatus.API.csproj"
#      $manifest.Project.PropertyGroup.PackageVersion=$Env:BUILD_BUILDNUMBER
#      $manifest.save(".\src\Core\AnyStatus.API\AnyStatus.API.csproj")

#- task: DownloadSecureFile@1
#  name: signingCert
#  displayName: 'Download CA certificate'
#  inputs:
#    secureFile: 'AnyStatus.Apps.Windows.Package_TemporaryKey.pfx'

- task: NuGetToolInstaller@1

- task: UseDotNet@2
  displayName: 'Use .NET Core sdk'
  inputs:
    packageType: sdk
    version: 3.1.x

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

#- task: FileTransform@2
#  condition: succeededOrFailed()
#  inputs:
#    folderPath: '$(System.DefaultWorkingDirectory)'
#    jsonTargetFiles: '.\src\Apps\Windows\AnyStatus.Apps.Windows\appsettings.json'

- task: MSBuild@1
  inputs:
   platform: 'x64'
   solution: '$(solution)'
   configuration: '$(buildConfiguration)'
   msbuildArguments: '/t:build'

- task: MSBuild@1
  inputs:
   platform: 'x86'
   solution: '$(solution)'
   configuration: '$(buildConfiguration)'
   msbuildArguments: '/t:build'

- task: MSBuild@1
  inputs:
    solution: src/Apps/Windows/AnyStatus.Apps.Windows.Package/AnyStatus.Apps.Windows.Package.wapproj
    platform: '$(BuildPlatform)'
    configuration: '$(BuildConfiguration)'
    msbuildArguments: '/t:restore'

- task: MSBuild@1
  inputs:
   solution: src/Apps/Windows/AnyStatus.Apps.Windows.Package/AnyStatus.Apps.Windows.Package.wapproj
   platform: $(buildPlatform)
   configuration: $(buildConfiguration)
   msbuildArguments: '/p:AppxBundlePlatforms="x86|x64" 
                 /p:AppxPackageDir="$(appxPackageDir)" 
                 /p:AppxBundle=Always 
                 /p:UapAppxPackageBuildMode=StoreUpload 
                 /p:AppxPackageSigningEnabled=false
                 /p:PackageCertificateThumbprint="" 
                 /p:PackageCertificateKeyFile="$(signingCert.secureFilePath)"'

#  displayName: 'Package the App'

#- task: CopyFiles@2
#  inputs:
#    contents: '**/AnyStatus.API.*.nupkg'
#    targetFolder: $(Build.ArtifactStagingDirectory)

- publish: $(Build.ArtifactStagingDirectory)
  artifact: AnyStatus

#- task: Windows Application Driver@0
#  inputs:
#    OperationType: 'Start'
#    AgentResolution: '1080p'

#- task: VSTest@2
#  inputs:
#    testSelector: 'testAssemblies'
#    testAssemblyVer2: |
#      **\AnyStatus*.Tests.dll
#      !**\*TestAdapter.dll
#      !**\obj\**
#    searchFolder: '$(System.DefaultWorkingDirectory)'
#    uiTests: true
#    otherConsoleOptions: '/Framework:FrameworkCore10'
#    platform: '$(buildPlatform)'
#    configuration: '$(buildConfiguration)'

#- task: Windows Application Driver@0
#  inputs:
#    OperationType: 'Stop'
#  condition: always()
